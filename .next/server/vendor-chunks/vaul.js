"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/vaul";
exports.ids = ["vendor-chunks/vaul"];
exports.modules = {

/***/ "(ssr)/./node_modules/vaul/dist/index.mjs":
/*!******************************************!*\
  !*** ./node_modules/vaul/dist/index.mjs ***!
  \******************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   Drawer: () => (/* binding */ nn)\n/* harmony export */ });\n/* harmony import */ var _radix_ui_react_dialog__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @radix-ui/react-dialog */ \"(ssr)/./node_modules/@radix-ui/react-dialog/dist/index.mjs\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react */ \"(ssr)/./node_modules/next/dist/server/future/route-modules/app-page/vendored/ssr/react.js\");\n/* __next_internal_client_entry_do_not_use__ Drawer auto */ \n\n\nvar Ee = /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createContext({\n    drawerRef: {\n        current: null\n    },\n    overlayRef: {\n        current: null\n    },\n    scaleBackground: ()=>{},\n    onPress: ()=>{},\n    onRelease: ()=>{},\n    onDrag: ()=>{},\n    onNestedDrag: ()=>{},\n    onNestedOpenChange: ()=>{},\n    onNestedRelease: ()=>{},\n    openProp: void 0,\n    dismissible: !1,\n    isOpen: !1,\n    keyboardIsOpen: {\n        current: !1\n    },\n    snapPointsOffset: null,\n    snapPoints: null,\n    modal: !1,\n    shouldFade: !1,\n    activeSnapPoint: null,\n    onOpenChange: ()=>{},\n    setActiveSnapPoint: ()=>{},\n    visible: !1,\n    closeDrawer: ()=>{},\n    setVisible: ()=>{},\n    direction: \"bottom\"\n}), fe = ()=>react__WEBPACK_IMPORTED_MODULE_0__.useContext(Ee);\nfunction Te(e, { insertAt: n } = {}) {\n    if (!e || typeof document == \"undefined\") return;\n    let t = document.head || document.getElementsByTagName(\"head\")[0], r = document.createElement(\"style\");\n    r.type = \"text/css\", n === \"top\" && t.firstChild ? t.insertBefore(r, t.firstChild) : t.appendChild(r), r.styleSheet ? r.styleSheet.cssText = e : r.appendChild(document.createTextNode(e));\n}\nTe(`[vaul-drawer]{touch-action:none;transition:transform .5s cubic-bezier(.32,.72,0,1)}[vaul-drawer][vaul-drawer-direction=bottom]{transform:translate3d(0,100%,0)}[vaul-drawer][vaul-drawer-direction=top]{transform:translate3d(0,-100%,0)}[vaul-drawer][vaul-drawer-direction=left]{transform:translate3d(-100%,0,0)}[vaul-drawer][vaul-drawer-direction=right]{transform:translate3d(100%,0,0)}.vaul-dragging .vaul-scrollable [vault-drawer-direction=top],.vaul-dragging .vaul-scrollable [vault-drawer-direction=bottom]{overflow-y:hidden!important}.vaul-dragging .vaul-scrollable [vault-drawer-direction=left],.vaul-dragging .vaul-scrollable [vault-drawer-direction=right]{overflow-x:hidden!important}[vaul-drawer][vaul-drawer-visible=true][vaul-drawer-direction=top],[vaul-drawer][vaul-drawer-visible=true][vaul-drawer-direction=bottom]{transform:translate3d(0,var(--snap-point-height, 0),0)}[vaul-drawer][vaul-drawer-visible=true][vaul-drawer-direction=left],[vaul-drawer][vaul-drawer-visible=true][vaul-drawer-direction=right]{transform:translate3d(var(--snap-point-height, 0),0,0)}[vaul-overlay]{opacity:0;transition:opacity .5s cubic-bezier(.32,.72,0,1)}[vaul-overlay][vaul-drawer-visible=true]{opacity:1}[vaul-drawer]:after{content:\"\";position:absolute;background:inherit;background-color:inherit}[vaul-drawer][vaul-drawer-direction=top]:after{top:initial;bottom:100%;left:0;right:0;height:200%}[vaul-drawer][vaul-drawer-direction=bottom]:after{top:100%;bottom:initial;left:0;right:0;height:200%}[vaul-drawer][vaul-drawer-direction=left]:after{left:initial;right:100%;top:0;bottom:0;width:200%}[vaul-drawer][vaul-drawer-direction=right]:after{left:100%;right:initial;top:0;bottom:0;width:200%}[vaul-overlay][vaul-snap-points=true]:not([vaul-snap-points-overlay=\"true\"]):not([data-state=\"closed\"]){opacity:0}[vaul-overlay][vaul-snap-points-overlay=true]:not([vaul-drawer-visible=\"false\"]){opacity:1}@keyframes fake-animation{}@media (hover: hover) and (pointer: fine){[vaul-drawer]{user-select:none}}\n`);\n\nvar pt =  false ? 0 : react__WEBPACK_IMPORTED_MODULE_0__.useEffect;\nfunction Se(...e) {\n    return (...n)=>{\n        for (let t of e)typeof t == \"function\" && t(...n);\n    };\n}\nfunction vt() {\n    return xe(/^Mac/);\n}\nfunction wt() {\n    return xe(/^iPhone/);\n}\nfunction ht() {\n    return xe(/^iPad/) || vt() && navigator.maxTouchPoints > 1;\n}\nfunction Re() {\n    return wt() || ht();\n}\nfunction xe(e) {\n    return  false ? 0 : void 0;\n}\nvar ye = typeof document != \"undefined\" && window.visualViewport;\nfunction We(e) {\n    let n = window.getComputedStyle(e);\n    return /(auto|scroll)/.test(n.overflow + n.overflowX + n.overflowY);\n}\nfunction Ue(e) {\n    for(We(e) && (e = e.parentElement); e && !We(e);)e = e.parentElement;\n    return e || document.scrollingElement || document.documentElement;\n}\nvar Et = new Set([\n    \"checkbox\",\n    \"radio\",\n    \"range\",\n    \"color\",\n    \"file\",\n    \"image\",\n    \"button\",\n    \"submit\",\n    \"reset\"\n]), me = 0, De;\nfunction je(e = {}) {\n    let { isDisabled: n } = e;\n    pt(()=>{\n        if (!n) return me++, me === 1 && (Re() ? De = yt() : De = Tt()), ()=>{\n            me--, me === 0 && De();\n        };\n    }, [\n        n\n    ]);\n}\nfunction Tt() {\n    return Se(ke(document.documentElement, \"paddingRight\", `${window.innerWidth - document.documentElement.clientWidth}px`));\n}\nfunction yt() {\n    let e, n = 0, t = (h)=>{\n        e = Ue(h.target), !(e === document.documentElement && e === document.body) && (n = h.changedTouches[0].pageY);\n    }, r = (h)=>{\n        if (!e || e === document.documentElement || e === document.body) {\n            h.preventDefault();\n            return;\n        }\n        let d = h.changedTouches[0].pageY, u = e.scrollTop, $ = e.scrollHeight - e.clientHeight;\n        $ !== 0 && ((u <= 0 && d > n || u >= $ && d < n) && h.preventDefault(), n = d);\n    }, a = (h)=>{\n        let d = h.target;\n        ge(d) && d !== document.activeElement && (h.preventDefault(), d.style.transform = \"translateY(-2000px)\", d.focus(), requestAnimationFrame(()=>{\n            d.style.transform = \"\";\n        }));\n    }, o = (h)=>{\n        let d = h.target;\n        ge(d) && (d.style.transform = \"translateY(-2000px)\", requestAnimationFrame(()=>{\n            d.style.transform = \"\", ye && (ye.height < window.innerHeight ? requestAnimationFrame(()=>{\n                Fe(d);\n            }) : ye.addEventListener(\"resize\", ()=>Fe(d), {\n                once: !0\n            }));\n        }));\n    }, s = ()=>{\n        window.scrollTo(0, 0);\n    }, b = window.pageXOffset, H = window.pageYOffset, x = Se(ke(document.documentElement, \"paddingRight\", `${window.innerWidth - document.documentElement.clientWidth}px`));\n    window.scrollTo(0, 0);\n    let S = Se(oe(document, \"touchstart\", t, {\n        passive: !1,\n        capture: !0\n    }), oe(document, \"touchmove\", r, {\n        passive: !1,\n        capture: !0\n    }), oe(document, \"touchend\", a, {\n        passive: !1,\n        capture: !0\n    }), oe(document, \"focus\", o, !0), oe(window, \"scroll\", s));\n    return ()=>{\n        x(), S(), window.scrollTo(b, H);\n    };\n}\nfunction ke(e, n, t) {\n    let r = e.style[n];\n    return e.style[n] = t, ()=>{\n        e.style[n] = r;\n    };\n}\nfunction oe(e, n, t, r) {\n    return e.addEventListener(n, t, r), ()=>{\n        e.removeEventListener(n, t, r);\n    };\n}\nfunction Fe(e) {\n    let n = document.scrollingElement || document.documentElement;\n    for(; e && e !== n;){\n        let t = Ue(e);\n        if (t !== document.documentElement && t !== document.body && t !== e) {\n            let r = t.getBoundingClientRect().top, a = e.getBoundingClientRect().top, o = e.getBoundingClientRect().bottom, s = t.getBoundingClientRect().bottom;\n            o > s && (t.scrollTop += a - r);\n        }\n        e = t.parentElement;\n    }\n}\nfunction ge(e) {\n    return e instanceof HTMLInputElement && !Et.has(e.type) || e instanceof HTMLTextAreaElement || e instanceof HTMLElement && e.isContentEditable;\n}\n\nfunction Dt(e, n) {\n    typeof e == \"function\" ? e(n) : e != null && (e.current = n);\n}\nfunction St(...e) {\n    return (n)=>e.forEach((t)=>Dt(t, n));\n}\nfunction He(...e) {\n    return react__WEBPACK_IMPORTED_MODULE_0__.useCallback(St(...e), e);\n}\n\nvar F = null;\nfunction ze({ isOpen: e, modal: n, nested: t, hasBeenOpened: r, preventScrollRestoration: a }) {\n    let [o, s] = react__WEBPACK_IMPORTED_MODULE_0__.useState( false ? 0 : \"\"), b = react__WEBPACK_IMPORTED_MODULE_0__.useRef(0), H = react__WEBPACK_IMPORTED_MODULE_0__.useCallback(()=>{\n        if (F === null && e) {\n            F = {\n                position: document.body.style.position,\n                top: document.body.style.top,\n                left: document.body.style.left,\n                height: document.body.style.height\n            };\n            let { scrollX: S, innerHeight: h } = window;\n            document.body.style.setProperty(\"position\", \"fixed\", \"important\"), document.body.style.top = `${-b.current}px`, document.body.style.left = `${-S}px`, document.body.style.right = \"0px\", document.body.style.height = \"auto\", setTimeout(()=>requestAnimationFrame(()=>{\n                    let d = h - window.innerHeight;\n                    d && b.current >= h && (document.body.style.top = `${-(b.current + d)}px`);\n                }), 300);\n        }\n    }, [\n        e\n    ]), x = react__WEBPACK_IMPORTED_MODULE_0__.useCallback(()=>{\n        if (F !== null) {\n            let S = -parseInt(document.body.style.top, 10), h = -parseInt(document.body.style.left, 10);\n            document.body.style.position = F.position, document.body.style.top = F.top, document.body.style.left = F.left, document.body.style.height = F.height, document.body.style.right = \"unset\", requestAnimationFrame(()=>{\n                if (a && o !== window.location.href) {\n                    s(window.location.href);\n                    return;\n                }\n                window.scrollTo(h, S);\n            }), F = null;\n        }\n    }, [\n        o\n    ]);\n    return react__WEBPACK_IMPORTED_MODULE_0__.useEffect(()=>{\n        function S() {\n            b.current = window.scrollY;\n        }\n        return S(), window.addEventListener(\"scroll\", S), ()=>{\n            window.removeEventListener(\"scroll\", S);\n        };\n    }, []), react__WEBPACK_IMPORTED_MODULE_0__.useEffect(()=>{\n        t || !r || (e ? (H(), n || setTimeout(()=>{\n            x();\n        }, 500)) : x());\n    }, [\n        e,\n        r,\n        o,\n        n,\n        t,\n        H,\n        x\n    ]), {\n        restorePositionSetting: x\n    };\n}\n\nvar Ye = new WeakMap;\nfunction y(e, n, t = !1) {\n    if (!e || !(e instanceof HTMLElement) || !n) return;\n    let r = {};\n    Object.entries(n).forEach(([a, o])=>{\n        if (a.startsWith(\"--\")) {\n            e.style.setProperty(a, o);\n            return;\n        }\n        r[a] = e.style[a], e.style[a] = o;\n    }), !t && Ye.set(e, r);\n}\nfunction ie(e, n) {\n    if (!e || !(e instanceof HTMLElement)) return;\n    let t = Ye.get(e);\n    t && (n ? e.style[n] = t[n] : Object.entries(t).forEach(([r, a])=>{\n        e.style[r] = a;\n    }));\n}\nvar R = (e)=>{\n    switch(e){\n        case \"top\":\n        case \"bottom\":\n            return !0;\n        case \"left\":\n        case \"right\":\n            return !1;\n        default:\n            return e;\n    }\n};\nfunction ae(e, n) {\n    let t = window.getComputedStyle(e), r = t.transform || t.webkitTransform || t.mozTransform, a = r.match(/^matrix3d\\((.+)\\)$/);\n    return a ? parseFloat(a[1].split(\", \")[R(n) ? 13 : 12]) : (a = r.match(/^matrix\\((.+)\\)$/), a ? parseFloat(a[1].split(\", \")[R(n) ? 5 : 4]) : null);\n}\nfunction _e(e) {\n    return 8 * (Math.log(e + 1) - 2);\n}\nvar T = {\n    DURATION: .5,\n    EASE: [\n        .32,\n        .72,\n        0,\n        1\n    ]\n}, be = .4;\n\nfunction qe(e) {\n    let n = react__WEBPACK_IMPORTED_MODULE_0__.useRef(e);\n    return react__WEBPACK_IMPORTED_MODULE_0__.useEffect(()=>{\n        n.current = e;\n    }), react__WEBPACK_IMPORTED_MODULE_0__.useMemo(()=>(...t)=>{\n            var r;\n            return (r = n.current) == null ? void 0 : r.call(n, ...t);\n        }, []);\n}\nfunction Rt({ defaultProp: e, onChange: n }) {\n    let t = react__WEBPACK_IMPORTED_MODULE_0__.useState(e), [r] = t, a = react__WEBPACK_IMPORTED_MODULE_0__.useRef(r), o = qe(n);\n    return react__WEBPACK_IMPORTED_MODULE_0__.useEffect(()=>{\n        a.current !== r && (o(r), a.current = r);\n    }, [\n        r,\n        a,\n        o\n    ]), t;\n}\nfunction Xe({ prop: e, defaultProp: n, onChange: t = ()=>{} }) {\n    let [r, a] = Rt({\n        defaultProp: n,\n        onChange: t\n    }), o = e !== void 0, s = o ? e : r, b = qe(t), H = react__WEBPACK_IMPORTED_MODULE_0__.useCallback((x)=>{\n        if (o) {\n            let h = typeof x == \"function\" ? x(e) : x;\n            h !== e && b(h);\n        } else a(x);\n    }, [\n        o,\n        e,\n        a,\n        b\n    ]);\n    return [\n        s,\n        H\n    ];\n}\nfunction Ke({ activeSnapPointProp: e, setActiveSnapPointProp: n, snapPoints: t, drawerRef: r, overlayRef: a, fadeFromIndex: o, onSnapPointChange: s, direction: b = \"bottom\" }) {\n    let [H, x] = Xe({\n        prop: e,\n        defaultProp: t == null ? void 0 : t[0],\n        onChange: n\n    }), S = react__WEBPACK_IMPORTED_MODULE_0__.useMemo(()=>H === (t == null ? void 0 : t[t.length - 1]) || null, [\n        t,\n        H\n    ]), h = t && t.length > 0 && (o || o === 0) && !Number.isNaN(o) && t[o] === H || !t, d = react__WEBPACK_IMPORTED_MODULE_0__.useMemo(()=>t == null ? void 0 : t.findIndex((g)=>g === H), [\n        t,\n        H\n    ]), u = react__WEBPACK_IMPORTED_MODULE_0__.useMemo(()=>{\n        var g;\n        return (g = t == null ? void 0 : t.map((p)=>{\n            let v = \"undefined\" != \"undefined\", C = typeof p == \"string\", A = 0;\n            if (C && (A = parseInt(p, 10)), R(b)) {\n                let P = C ? A : v ? p * window.innerHeight : 0;\n                return v ? b === \"bottom\" ? window.innerHeight - P : -window.innerHeight + P : P;\n            }\n            let N = C ? A : v ? p * window.innerWidth : 0;\n            return v ? b === \"right\" ? window.innerWidth - N : -window.innerWidth + N : N;\n        })) != null ? g : [];\n    }, [\n        t\n    ]), $ = react__WEBPACK_IMPORTED_MODULE_0__.useMemo(()=>d !== null ? u == null ? void 0 : u[d] : null, [\n        u,\n        d\n    ]), I = react__WEBPACK_IMPORTED_MODULE_0__.useCallback((g)=>{\n        var v;\n        let p = (v = u == null ? void 0 : u.findIndex((C)=>C === g)) != null ? v : null;\n        s(p), y(r.current, {\n            transition: `transform ${T.DURATION}s cubic-bezier(${T.EASE.join(\",\")})`,\n            transform: R(b) ? `translate3d(0, ${g}px, 0)` : `translate3d(${g}px, 0, 0)`\n        }), u && p !== u.length - 1 && p !== o ? y(a.current, {\n            transition: `opacity ${T.DURATION}s cubic-bezier(${T.EASE.join(\",\")})`,\n            opacity: \"0\"\n        }) : y(a.current, {\n            transition: `opacity ${T.DURATION}s cubic-bezier(${T.EASE.join(\",\")})`,\n            opacity: \"1\"\n        }), x(p !== null ? t == null ? void 0 : t[p] : null);\n    }, [\n        r.current,\n        t,\n        u,\n        o,\n        a,\n        x\n    ]);\n    react__WEBPACK_IMPORTED_MODULE_0__.useEffect(()=>{\n        var g;\n        if (e) {\n            let p = (g = t == null ? void 0 : t.findIndex((v)=>v === e)) != null ? g : -1;\n            u && p !== -1 && typeof u[p] == \"number\" && I(u[p]);\n        }\n    }, [\n        e,\n        t,\n        u,\n        I\n    ]);\n    function U({ draggedDistance: g, closeDrawer: p, velocity: v, dismissible: C }) {\n        if (o === void 0) return;\n        let A = b === \"bottom\" || b === \"right\" ? ($ != null ? $ : 0) - g : ($ != null ? $ : 0) + g, N = d === o - 1, P = d === 0, Q = g > 0;\n        if (N && y(a.current, {\n            transition: `opacity ${T.DURATION}s cubic-bezier(${T.EASE.join(\",\")})`\n        }), v > 2 && !Q) {\n            C ? p() : I(u[0]);\n            return;\n        }\n        if (v > 2 && Q && u && t) {\n            I(u[t.length - 1]);\n            return;\n        }\n        let Z = u == null ? void 0 : u.reduce((V, Y)=>typeof V != \"number\" || typeof Y != \"number\" ? V : Math.abs(Y - A) < Math.abs(V - A) ? Y : V), le = R(b) ? window.innerHeight : window.innerWidth;\n        if (v > be && Math.abs(g) < le * .4) {\n            let V = Q ? 1 : -1;\n            if (V > 0 && S) {\n                I(u[t.length - 1]);\n                return;\n            }\n            if (P && V < 0 && C && p(), d === null) return;\n            I(u[d + V]);\n            return;\n        }\n        I(Z);\n    }\n    function f({ draggedDistance: g }) {\n        if ($ === null) return;\n        let p = b === \"bottom\" || b === \"right\" ? $ - g : $ + g;\n        (b === \"bottom\" || b === \"right\") && p < u[u.length - 1] || (b === \"top\" || b === \"left\") && p > u[u.length - 1] || y(r.current, {\n            transform: R(b) ? `translate3d(0, ${p}px, 0)` : `translate3d(${p}px, 0, 0)`\n        });\n    }\n    function J(g, p) {\n        if (!t || typeof d != \"number\" || !u || o === void 0) return null;\n        let v = d === o - 1;\n        if (d >= o && p) return 0;\n        if (v && !p) return 1;\n        if (!h && !v) return null;\n        let A = v ? d + 1 : d - 1, N = v ? u[A] - u[A - 1] : u[A + 1] - u[A], P = g / Math.abs(N);\n        return v ? 1 - P : P;\n    }\n    return {\n        isLastSnapPoint: S,\n        activeSnapPoint: H,\n        shouldFade: h,\n        getPercentageDragged: J,\n        setActiveSnapPoint: x,\n        activeSnapPointIndex: d,\n        onRelease: U,\n        onDrag: f,\n        snapPointsOffset: u\n    };\n}\nvar xt = .25, Ht = 100, Ge = 8, z = 16, Je = 26, Qe = \"vaul-dragging\";\nfunction Ze({ open: e, onOpenChange: n, children: t, shouldScaleBackground: r, onDrag: a, onRelease: o, snapPoints: s, nested: b = !1, closeThreshold: H = xt, scrollLockTimeout: x = Ht, dismissible: S = !0, fadeFromIndex: h = s && s.length - 1, activeSnapPoint: d, setActiveSnapPoint: u, fixed: $, modal: I = !0, onClose: U, direction: f = \"bottom\", preventScrollRestoration: J = !0 }) {\n    var Ne;\n    let [g = !1, p] = react__WEBPACK_IMPORTED_MODULE_0__.useState(!1), [v, C] = react__WEBPACK_IMPORTED_MODULE_0__.useState(!1), [A, N] = react__WEBPACK_IMPORTED_MODULE_0__.useState(!1), [P, Q] = react__WEBPACK_IMPORTED_MODULE_0__.useState(!1), [Z, le] = react__WEBPACK_IMPORTED_MODULE_0__.useState(!1), [V, Y] = react__WEBPACK_IMPORTED_MODULE_0__.useState(!1), j = react__WEBPACK_IMPORTED_MODULE_0__.useRef(null), se = react__WEBPACK_IMPORTED_MODULE_0__.useRef(null), pe = react__WEBPACK_IMPORTED_MODULE_0__.useRef(null), Me = react__WEBPACK_IMPORTED_MODULE_0__.useRef(null), ee = react__WEBPACK_IMPORTED_MODULE_0__.useRef(null), ue = react__WEBPACK_IMPORTED_MODULE_0__.useRef(!1), ve = react__WEBPACK_IMPORTED_MODULE_0__.useRef(null), we = react__WEBPACK_IMPORTED_MODULE_0__.useRef(0), _ = react__WEBPACK_IMPORTED_MODULE_0__.useRef(!1), $e = react__WEBPACK_IMPORTED_MODULE_0__.useRef(0), l = react__WEBPACK_IMPORTED_MODULE_0__.useRef(null), Le = react__WEBPACK_IMPORTED_MODULE_0__.useRef(((Ne = l.current) == null ? void 0 : Ne.getBoundingClientRect().height) || 0), he = react__WEBPACK_IMPORTED_MODULE_0__.useRef(0), nt = react__WEBPACK_IMPORTED_MODULE_0__.useCallback((i)=>{\n        s && i === ne.length - 1 && (se.current = new Date);\n    }, []), { activeSnapPoint: rt, activeSnapPointIndex: te, setActiveSnapPoint: Ce, onRelease: ot, snapPointsOffset: ne, onDrag: it, shouldFade: Ae, getPercentageDragged: at } = Ke({\n        snapPoints: s,\n        activeSnapPointProp: d,\n        setActiveSnapPointProp: u,\n        drawerRef: l,\n        fadeFromIndex: h,\n        overlayRef: j,\n        onSnapPointChange: nt,\n        direction: f\n    });\n    je({\n        isDisabled: !g || Z || !I || V || !v\n    });\n    let { restorePositionSetting: lt } = ze({\n        isOpen: g,\n        modal: I,\n        nested: b,\n        hasBeenOpened: v,\n        preventScrollRestoration: J\n    });\n    function q() {\n        return (window.innerWidth - Je) / window.innerWidth;\n    }\n    function st(i) {\n        var c;\n        !S && !s || l.current && !l.current.contains(i.target) || (Le.current = ((c = l.current) == null ? void 0 : c.getBoundingClientRect().height) || 0, le(!0), pe.current = new Date, Re() && window.addEventListener(\"touchend\", ()=>ue.current = !1, {\n            once: !0\n        }), i.target.setPointerCapture(i.pointerId), we.current = R(f) ? i.screenY : i.screenX);\n    }\n    function Oe(i, c) {\n        var O;\n        let w = i, E = (O = window.getSelection()) == null ? void 0 : O.toString(), D = l.current ? ae(l.current, f) : null, M = new Date;\n        if (w.hasAttribute(\"data-vaul-no-drag\")) return !1;\n        if (f === \"right\" || f === \"left\") return !0;\n        if (se.current && M.getTime() - se.current.getTime() < 500) return !1;\n        if (D !== null && (f === \"bottom\" ? D > 0 : D < 0)) return !0;\n        if (E && E.length > 0) return !1;\n        if (ee.current && M.getTime() - ee.current.getTime() < x && D === 0 || c) return ee.current = M, !1;\n        for(; w;){\n            if (w.scrollHeight > w.clientHeight) {\n                if (w.scrollTop !== 0) return ee.current = new Date, !1;\n                if (w.getAttribute(\"role\") === \"dialog\") return !0;\n            }\n            w = w.parentNode;\n        }\n        return !0;\n    }\n    function ut(i) {\n        if (l.current && Z) {\n            let c = f === \"bottom\" || f === \"right\" ? 1 : -1, w = (we.current - (R(f) ? i.screenY : i.screenX)) * c, E = w > 0;\n            if (s && te === 0 && !S || !ue.current && !Oe(i.target, E)) return;\n            if (l.current.classList.add(Qe), ue.current = !0, y(l.current, {\n                transition: \"none\"\n            }), y(j.current, {\n                transition: \"none\"\n            }), s && it({\n                draggedDistance: w\n            }), E && !s) {\n                let W = _e(w), de = Math.min(W * -1, 0) * c;\n                y(l.current, {\n                    transform: R(f) ? `translate3d(0, ${de}px, 0)` : `translate3d(${de}px, 0, 0)`\n                });\n                return;\n            }\n            let D = Math.abs(w), M = document.querySelector(\"[vaul-drawer-wrapper]\"), O = D / Le.current, re = at(D, E);\n            re !== null && (O = re);\n            let k = 1 - O;\n            if ((Ae || h && te === h - 1) && (a == null || a(i, O), y(j.current, {\n                opacity: `${k}`,\n                transition: \"none\"\n            }, !0)), M && j.current && r) {\n                let W = Math.min(q() + O * (1 - q()), 1), de = 8 - O * 8, Pe = Math.max(0, 14 - O * 14);\n                y(M, {\n                    borderRadius: `${de}px`,\n                    transform: R(f) ? `scale(${W}) translate3d(0, ${Pe}px, 0)` : `scale(${W}) translate3d(${Pe}px, 0, 0)`,\n                    transition: \"none\"\n                }, !0);\n            }\n            if (!s) {\n                let W = D * c;\n                y(l.current, {\n                    transform: R(f) ? `translate3d(0, ${W}px, 0)` : `translate3d(${W}px, 0, 0)`\n                });\n            }\n        }\n    }\n    react__WEBPACK_IMPORTED_MODULE_0__.useEffect(()=>()=>{\n            ce(!1), lt();\n        }, []), react__WEBPACK_IMPORTED_MODULE_0__.useEffect(()=>{\n        var c;\n        function i() {\n            var E;\n            if (!l.current) return;\n            let w = document.activeElement;\n            if (ge(w) || _.current) {\n                let D = ((E = window.visualViewport) == null ? void 0 : E.height) || 0, M = window.innerHeight - D, O = l.current.getBoundingClientRect().height || 0;\n                he.current || (he.current = O);\n                let re = l.current.getBoundingClientRect().top;\n                if (Math.abs($e.current - M) > 60 && (_.current = !_.current), s && s.length > 0 && ne && te) {\n                    let k = ne[te] || 0;\n                    M += k;\n                }\n                if ($e.current = M, O > D || _.current) {\n                    let k = l.current.getBoundingClientRect().height, W = k;\n                    k > D && (W = D - Je), $ ? l.current.style.height = `${k - Math.max(M, 0)}px` : l.current.style.height = `${Math.max(W, D - re)}px`;\n                } else l.current.style.height = `${he.current}px`;\n                s && s.length > 0 && !_.current ? l.current.style.bottom = \"0px\" : l.current.style.bottom = `${Math.max(M, 0)}px`;\n            }\n        }\n        return (c = window.visualViewport) == null || c.addEventListener(\"resize\", i), ()=>{\n            var w;\n            return (w = window.visualViewport) == null ? void 0 : w.removeEventListener(\"resize\", i);\n        };\n    }, [\n        te,\n        s,\n        ne\n    ]);\n    function X() {\n        l.current && (U == null || U(), y(l.current, {\n            transform: R(f) ? `translate3d(0, ${f === \"bottom\" ? \"100%\" : \"-100%\"}, 0)` : `translate3d(${f === \"right\" ? \"100%\" : \"-100%\"}, 0, 0)`,\n            transition: `transform ${T.DURATION}s cubic-bezier(${T.EASE.join(\",\")})`\n        }), y(j.current, {\n            opacity: \"0\",\n            transition: `opacity ${T.DURATION}s cubic-bezier(${T.EASE.join(\",\")})`\n        }), ce(!1), setTimeout(()=>{\n            N(!1), p(!1);\n        }, 300), setTimeout(()=>{\n            s && Ce(s[0]);\n        }, T.DURATION * 1e3));\n    }\n    react__WEBPACK_IMPORTED_MODULE_0__.useEffect(()=>{\n        if (!g && r) {\n            let i = setTimeout(()=>{\n                ie(document.body);\n            }, 200);\n            return ()=>clearTimeout(i);\n        }\n    }, [\n        g,\n        r\n    ]), react__WEBPACK_IMPORTED_MODULE_0__.useEffect(()=>{\n        e ? (p(!0), C(!0)) : X();\n    }, [\n        e\n    ]), react__WEBPACK_IMPORTED_MODULE_0__.useEffect(()=>{\n        P && (n == null || n(g));\n    }, [\n        g\n    ]), react__WEBPACK_IMPORTED_MODULE_0__.useEffect(()=>{\n        Q(!0);\n    }, []);\n    function Ie() {\n        if (!l.current) return;\n        let i = document.querySelector(\"[vaul-drawer-wrapper]\"), c = ae(l.current, f);\n        y(l.current, {\n            transform: \"translate3d(0, 0, 0)\",\n            transition: `transform ${T.DURATION}s cubic-bezier(${T.EASE.join(\",\")})`\n        }), y(j.current, {\n            transition: `opacity ${T.DURATION}s cubic-bezier(${T.EASE.join(\",\")})`,\n            opacity: \"1\"\n        }), r && c && c > 0 && g && y(i, {\n            borderRadius: `${Ge}px`,\n            overflow: \"hidden\",\n            ...R(f) ? {\n                transform: `scale(${q()}) translate3d(0, calc(env(safe-area-inset-top) + 14px), 0)`,\n                transformOrigin: \"top\"\n            } : {\n                transform: `scale(${q()}) translate3d(calc(env(safe-area-inset-top) + 14px), 0, 0)`,\n                transformOrigin: \"left\"\n            },\n            transitionProperty: \"transform, border-radius\",\n            transitionDuration: `${T.DURATION}s`,\n            transitionTimingFunction: `cubic-bezier(${T.EASE.join(\",\")})`\n        }, !0);\n    }\n    function ct(i) {\n        var O;\n        if (!Z || !l.current) return;\n        l.current.classList.remove(Qe), ue.current = !1, le(!1), Me.current = new Date;\n        let c = ae(l.current, f);\n        if (!Oe(i.target, !1) || !c || Number.isNaN(c) || pe.current === null) return;\n        let w = Me.current.getTime() - pe.current.getTime(), E = we.current - (R(f) ? i.screenY : i.screenX), D = Math.abs(E) / w;\n        if (D > .05 && (Y(!0), setTimeout(()=>{\n            Y(!1);\n        }, 200)), s) {\n            ot({\n                draggedDistance: E * (f === \"bottom\" || f === \"right\" ? 1 : -1),\n                closeDrawer: X,\n                velocity: D,\n                dismissible: S\n            }), o == null || o(i, !0);\n            return;\n        }\n        if (f === \"bottom\" || f === \"right\" ? E > 0 : E < 0) {\n            Ie(), o == null || o(i, !0);\n            return;\n        }\n        if (D > be) {\n            X(), o == null || o(i, !1);\n            return;\n        }\n        let M = Math.min((O = l.current.getBoundingClientRect().height) != null ? O : 0, window.innerHeight);\n        if (c >= M * H) {\n            X(), o == null || o(i, !1);\n            return;\n        }\n        o == null || o(i, !0), Ie();\n    }\n    react__WEBPACK_IMPORTED_MODULE_0__.useEffect(()=>{\n        g && (y(document.documentElement, {\n            scrollBehavior: \"auto\"\n        }), se.current = new Date, ce(!0));\n    }, [\n        g\n    ]), react__WEBPACK_IMPORTED_MODULE_0__.useEffect(()=>{\n        var i;\n        if (l.current && A) {\n            let c = (i = l == null ? void 0 : l.current) == null ? void 0 : i.querySelectorAll(\"*\");\n            c == null || c.forEach((w)=>{\n                let E = w;\n                (E.scrollHeight > E.clientHeight || E.scrollWidth > E.clientWidth) && E.classList.add(\"vaul-scrollable\");\n            });\n        }\n    }, [\n        A\n    ]);\n    function ce(i) {\n        let c = document.querySelector(\"[vaul-drawer-wrapper]\");\n        !c || !r || (i ? (y(document.body, {\n            background: document.body.style.backgroundColor || document.body.style.background\n        }), y(document.body, {\n            background: \"black\"\n        }, !0), y(c, {\n            borderRadius: `${Ge}px`,\n            overflow: \"hidden\",\n            ...R(f) ? {\n                transform: `scale(${q()}) translate3d(0, calc(env(safe-area-inset-top) + 14px), 0)`,\n                transformOrigin: \"top\"\n            } : {\n                transform: `scale(${q()}) translate3d(calc(env(safe-area-inset-top) + 14px), 0, 0)`,\n                transformOrigin: \"left\"\n            },\n            transitionProperty: \"transform, border-radius\",\n            transitionDuration: `${T.DURATION}s`,\n            transitionTimingFunction: `cubic-bezier(${T.EASE.join(\",\")})`\n        })) : (ie(c, \"overflow\"), ie(c, \"transform\"), ie(c, \"borderRadius\"), y(c, {\n            transitionProperty: \"transform, border-radius\",\n            transitionDuration: `${T.DURATION}s`,\n            transitionTimingFunction: `cubic-bezier(${T.EASE.join(\",\")})`\n        })));\n    }\n    function dt(i) {\n        let c = i ? (window.innerWidth - z) / window.innerWidth : 1, w = i ? -z : 0;\n        ve.current && window.clearTimeout(ve.current), y(l.current, {\n            transition: `transform ${T.DURATION}s cubic-bezier(${T.EASE.join(\",\")})`,\n            transform: `scale(${c}) translate3d(0, ${w}px, 0)`\n        }), !i && l.current && (ve.current = setTimeout(()=>{\n            let E = ae(l.current, f);\n            y(l.current, {\n                transition: \"none\",\n                transform: R(f) ? `translate3d(0, ${E}px, 0)` : `translate3d(${E}px, 0, 0)`\n            });\n        }, 500));\n    }\n    function ft(i, c) {\n        if (c < 0) return;\n        let w = R(f) ? window.innerHeight : window.innerWidth, E = (w - z) / w, D = E + c * (1 - E), M = -z + c * z;\n        y(l.current, {\n            transform: R(f) ? `scale(${D}) translate3d(0, ${M}px, 0)` : `scale(${D}) translate3d(${M}px, 0, 0)`,\n            transition: \"none\"\n        });\n    }\n    function mt(i, c) {\n        let w = R(f) ? window.innerHeight : window.innerWidth, E = c ? (w - z) / w : 1, D = c ? -z : 0;\n        c && y(l.current, {\n            transition: `transform ${T.DURATION}s cubic-bezier(${T.EASE.join(\",\")})`,\n            transform: R(f) ? `scale(${E}) translate3d(0, ${D}px, 0)` : `scale(${E}) translate3d(${D}px, 0, 0)`\n        });\n    }\n    return /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(_radix_ui_react_dialog__WEBPACK_IMPORTED_MODULE_1__.Root, {\n        modal: I,\n        onOpenChange: (i)=>{\n            if (e !== void 0) {\n                n == null || n(i);\n                return;\n            }\n            i ? (C(!0), p(i)) : X();\n        },\n        open: g\n    }, /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(Ee.Provider, {\n        value: {\n            visible: A,\n            activeSnapPoint: rt,\n            snapPoints: s,\n            setActiveSnapPoint: Ce,\n            drawerRef: l,\n            overlayRef: j,\n            scaleBackground: ce,\n            onOpenChange: n,\n            onPress: st,\n            setVisible: N,\n            onRelease: ct,\n            onDrag: ut,\n            dismissible: S,\n            isOpen: g,\n            shouldFade: Ae,\n            closeDrawer: X,\n            onNestedDrag: ft,\n            onNestedOpenChange: dt,\n            onNestedRelease: mt,\n            keyboardIsOpen: _,\n            openProp: e,\n            modal: I,\n            snapPointsOffset: ne,\n            direction: f\n        }\n    }, t));\n}\nvar et = /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.forwardRef(function({ children: e, ...n }, t) {\n    let { overlayRef: r, snapPoints: a, onRelease: o, shouldFade: s, isOpen: b, visible: H } = fe(), x = He(t, r), S = a && a.length > 0;\n    return /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(_radix_ui_react_dialog__WEBPACK_IMPORTED_MODULE_1__.Overlay, {\n        onMouseUp: o,\n        ref: x,\n        \"vaul-drawer-visible\": H ? \"true\" : \"false\",\n        \"vaul-overlay\": \"\",\n        \"vaul-snap-points\": b && S ? \"true\" : \"false\",\n        \"vaul-snap-points-overlay\": b && s ? \"true\" : \"false\",\n        ...n\n    });\n});\net.displayName = \"Drawer.Overlay\";\nvar tt = /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.forwardRef(function({ onOpenAutoFocus: e, onPointerDownOutside: n, onAnimationEnd: t, style: r, ...a }, o) {\n    let { drawerRef: s, onPress: b, onRelease: H, onDrag: x, dismissible: S, keyboardIsOpen: h, snapPointsOffset: d, visible: u, closeDrawer: $, modal: I, openProp: U, onOpenChange: f, setVisible: J, direction: g } = fe(), p = He(o, s);\n    return react__WEBPACK_IMPORTED_MODULE_0__.useEffect(()=>{\n        J(!0);\n    }, []), /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(_radix_ui_react_dialog__WEBPACK_IMPORTED_MODULE_1__.Content, {\n        onOpenAutoFocus: (v)=>{\n            var C;\n            e ? e(v) : (v.preventDefault(), (C = s.current) == null || C.focus());\n        },\n        onPointerDown: b,\n        onPointerDownOutside: (v)=>{\n            if (n == null || n(v), !I || v.defaultPrevented) {\n                v.preventDefault();\n                return;\n            }\n            h.current && (h.current = !1), v.preventDefault(), f == null || f(!1), !(!S || U !== void 0) && $();\n        },\n        onPointerMove: x,\n        onPointerUp: H,\n        ref: p,\n        style: d && d.length > 0 ? {\n            \"--snap-point-height\": `${d[0]}px`,\n            ...r\n        } : r,\n        ...a,\n        \"vaul-drawer\": \"\",\n        \"vaul-drawer-direction\": g,\n        \"vaul-drawer-visible\": u ? \"true\" : \"false\"\n    });\n});\ntt.displayName = \"Drawer.Content\";\nfunction Mt({ onDrag: e, onOpenChange: n, ...t }) {\n    let { onNestedDrag: r, onNestedOpenChange: a, onNestedRelease: o } = fe();\n    if (!r) throw new Error(\"Drawer.NestedRoot must be placed in another drawer\");\n    return /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(Ze, {\n        nested: !0,\n        onClose: ()=>{\n            a(!1);\n        },\n        onDrag: (s, b)=>{\n            r(s, b), e == null || e(s, b);\n        },\n        onOpenChange: (s)=>{\n            s && a(s), n == null || n(s);\n        },\n        onRelease: o,\n        ...t\n    });\n}\nvar nn = {\n    Root: Ze,\n    NestedRoot: Mt,\n    Content: tt,\n    Overlay: et,\n    Trigger: _radix_ui_react_dialog__WEBPACK_IMPORTED_MODULE_1__.Trigger,\n    Portal: _radix_ui_react_dialog__WEBPACK_IMPORTED_MODULE_1__.Portal,\n    Close: _radix_ui_react_dialog__WEBPACK_IMPORTED_MODULE_1__.Close,\n    Title: _radix_ui_react_dialog__WEBPACK_IMPORTED_MODULE_1__.Title,\n    Description: _radix_ui_react_dialog__WEBPACK_IMPORTED_MODULE_1__.Description\n};\n //# sourceMappingURL=index.mjs.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/vaul/dist/index.mjs\n");

/***/ })

};
;