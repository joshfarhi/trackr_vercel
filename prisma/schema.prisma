// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("POSTGRES_PRISMA_URL")
  directUrl      = env("POSTGRES_URL_NON_POOLING")

}

model UserSettings {
  userId   String @id
  Unit     String @default("g")
  weight String @default("g")
}

model Strain {
 id        Int       @id @default(autoincrement())
  name      String    @unique 
  createdAt DateTime  @default(now())
  icon      String?
  products  Product[] 

}

model Category {
 id        Int       @id @default(autoincrement())
  createdAt DateTime @default(now())
  name      String    @unique
  icon      String
  products  Product[] 

}

model Grower {
   id        Int       @id @default(autoincrement())
  createdAt DateTime  @default(now())
  name      String    @unique
  icon      String
  products  Product[] 

}


model Product {
  id          Int       @id @default(autoincrement())
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  product     String    @unique
  icon        String?
  strainId    Int
  strain      Strain    @relation(fields: [strainId], references: [id])
  growerId    Int
  grower      Grower    @relation(fields: [growerId], references: [id])
  categoryId  Int
  category    Category  @relation(fields: [categoryId], references: [id])
  transactions Transaction[]  // No @relation attribute needed here
  quantity    Int       @default(0)
}

model Transaction {
  id          Int      @id @default(autoincrement())
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  amount      Float
  description String?
  date        DateTime
  type        String   @default("order")
  product     Product  @relation(fields: [productId], references: [id], onDelete: Cascade)  // Specify @relation here
  productId   Int
}


model MonthHistory {
  userId  String
  day     Int
  month   Int
  year    Int
  order  Float
  returns Float

  @@id([day, month, year])
}

model YearHistory {
  userId  String
  month   Int
  year    Int
  order  Float
  returns Float

  @@id([month, year])
}
